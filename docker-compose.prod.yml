# Production Docker Compose Configuration
# This configuration provides optimized production settings with resource constraints,
# strict health checks, and proper data persistence

services:
  # API Service - Production optimized
  quokkapack.api:
    build:
      context: .
      dockerfile: src/QuokkaPack.API/Dockerfile
      target: final  # Use final stage for production (minimal runtime image)
    ports:
      - "7100:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - JwtSettings__Secret=${JWT_SECRET}
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=QuokkaPackDb;User Id=sa;Password=${SA_PASSWORD};TrustServerCertificate=True;MultipleActiveResultSets=true;
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
      - Logging__LogLevel__Microsoft.EntityFrameworkCore=Warning
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    depends_on:
      sqlserver:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Razor Pages Service - Production optimized
  quokkapack.razor:
    build:
      context: .
      dockerfile: src/QuokkaPack.Razor/Dockerfile
      target: final  # Use final stage for production
    ports:
      - "7200:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - JwtSettings__Secret=${JWT_SECRET}
      - DownstreamApi__BaseUrl=http://quokkapack.api:8080
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=QuokkaPackDb;User Id=sa;Password=${SA_PASSWORD};TrustServerCertificate=True;MultipleActiveResultSets=true;
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
      - Logging__LogLevel__Microsoft.EntityFrameworkCore=Warning
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    depends_on:
      sqlserver:
        condition: service_healthy
      quokkapack.api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Blazor Service - Production optimized
  quokkapack.blazor:
    build:
      context: .
      dockerfile: src/QuokkaPack.Blazor/Dockerfile
      target: final  # Use final stage for production
    ports:
      - "7300:80"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://quokkapack.api:8080
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    depends_on:
      quokkapack.api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Angular Service - Production optimized with nginx
  quokkapack.angular:
    build:
      context: ./src/QuokkaPack.Angular
      dockerfile: Dockerfile
      target: final  # Use final stage with nginx for production
    ports:
      - "7400:80"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://quokkapack.api:8080
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    depends_on:
      quokkapack.api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # SQL Server - Production configuration with persistence and backup
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "${SA_PASSWORD}"
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Express"  # Use Express edition for production (free)
      MSSQL_COLLATION: "SQL_Latin1_General_CP1_CI_AS"
      MSSQL_MEMORY_LIMIT_MB: 1024  # Limit memory usage
      MSSQL_TCP_PORT: 1433
    ports:
      - "1433:1433"
    volumes:
      - sql_prod_data:/var/opt/mssql/data
      - sql_prod_log:/var/opt/mssql/log
      - sql_prod_backup:/var/opt/mssql/backup
      - ./scripts/init-prod-db.sql:/docker-entrypoint-initdb.d/init-prod-db.sql:ro
      - ./scripts/init-db-with-migrations.sh:/docker-entrypoint-initdb.d/init-db-with-migrations.sh:ro
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 300s
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SA_PASSWORD} -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    command: >
      sh -c "
        /opt/mssql/bin/sqlservr &
        sleep 60 &&
        chmod +x /docker-entrypoint-initdb.d/init-db-with-migrations.sh &&
        DB_SERVER=localhost SA_PASSWORD=${SA_PASSWORD} /docker-entrypoint-initdb.d/init-db-with-migrations.sh &&
        wait
      "

  # Backup Service - Automated database backups
  backup:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "${SA_PASSWORD}"
      ACCEPT_EULA: "Y"
      DB_SERVER: "sqlserver"
      DB_NAME: "QuokkaPackDb"
      BACKUP_SCHEDULE: "86400"  # Daily backups (24 hours)
      RETENTION_DAYS: "7"
    volumes:
      - sql_prod_backup:/var/opt/mssql/backup
      - ./scripts/backup-db.sh:/backup-db.sh:ro
    command: >
      sh -c "
        chmod +x /backup-db.sh &&
        while true; do
          sleep $${BACKUP_SCHEDULE:-86400} &&
          /backup-db.sh
        done
      "
    depends_on:
      sqlserver:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  # Production database volumes with explicit configuration
  sql_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prod/sql/data
  
  sql_prod_log:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prod/sql/log
  
  sql_prod_backup:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prod/sql/backup

networks:
  default:
    name: quokkapack-prod
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: quokkapack-prod
    ipam:
      config:
        - subnet: 172.20.0.0/16