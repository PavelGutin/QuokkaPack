@page "/trips"
@using System.Net.Http.Json
@using QuokkaPack.Shared.DTOs.Trip
@inject IHttpClientFactory HttpClientFactory

@inject NavigationManager Nav

<h1 class="mb-4">My Trips</h1>

<div class="mb-4">
    <a class="btn btn-success" href="/trips/create">
        <i class="bi bi-plus-circle me-1"></i> Add Trip
    </a>
</div>

@if (isLoading)
{
    <div class="text-muted">Loading trips…</div>
}
else if (!string.IsNullOrWhiteSpace(error))
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @error
    </div>
}
else if (trips is null || trips.Count == 0)
{
    <div class="alert alert-info">No trips yet. Add your first one!</div>
}
else
{
    <div class="row g-3">
        @foreach (var trip in trips)
        {
            <div class="col-12 col-md-6 col-xl-4">
                <div class="card h-100 shadow-sm">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex align-items-start justify-content-between mb-2">
                            <h5 class="card-title mb-0">@TripTitle(trip)</h5>
                            <span class="badge bg-light text-dark">#@trip.Id</span>
                        </div>

                        @if (!string.IsNullOrWhiteSpace(TripDates(trip)))
                        {
                            <p class="card-text text-muted mb-3">@TripDates(trip)</p>
                        }

                        <div class="mt-auto d-flex gap-2 flex-wrap">
                            <a class="btn btn-primary btn-sm"
                               href="@($"/trips/{trip.Id}/pack")" title="Pack">
                                <i class="bi bi-backpack2"></i> Pack
                            </a>
                            <a class="btn btn-outline-secondary btn-sm"
                               href="@($"/trips/{trip.Id}/edit")" title="Edit">
                                <i class="bi bi-pencil-square"></i> Edit
                            </a>
                            <button class="btn btn-outline-danger btn-sm"
                                    @onclick="() => ConfirmDelete(trip.Id)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<TripSummaryReadDto>? trips;
    private bool isLoading = true;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {
            var api = HttpClientFactory.CreateClient("Api"); // uses BaseAddress + BearerTokenHandler
            trips = await api.GetFromJsonAsync<List<TripSummaryReadDto>>("api/Trips");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    // Helpers: keep tolerant to unknown/optional fields in TripReadDto
    private static string TripTitle(TripSummaryReadDto t)
        => string.IsNullOrWhiteSpace(t?.Destination) ? "Untitled Trip" : t!.Destination!;

    private static string TripDates(TripSummaryReadDto t)
    {
        // Try to render date range if present; ignore if your DTO lacks these
        // Adjust to your actual types (DateOnly/DateTime?/string) as needed.
        var start = TryFormatDate(GetProp(t, "StartDate"));
        var end = TryFormatDate(GetProp(t, "EndDate"));

        return (start, end) switch
        {
            (null, null) => string.Empty,
            (string s, null) => $"Starts {s}",
            (null, string e) => $"Ends {e}",
            (string s, string e) => $"{s} – {e}"
        };

        static object? GetProp(object obj, string name)
            => obj.GetType().GetProperty(name)?.GetValue(obj);

        static string? TryFormatDate(object? val)
        {
            if (val is null) return null;
            // Handle DateTime/DateOnly/string gracefully
            if (val is DateTime dt) return dt.ToString("MMM d, yyyy");
            if (val is DateTimeOffset dto) return dto.ToString("MMM d, yyyy");
            if (val is string s && DateTime.TryParse(s, out var parsed)) return parsed.ToString("MMM d, yyyy");

#if NET8_0_OR_GREATER
            if (val is DateOnly d8) return d8.ToString("MMM d, yyyy");
#endif
            return val.ToString();
        }
    }

    private async Task ConfirmDelete(int id)
    {
        // Placeholder: swap with a real modal later
        var confirmed = await JSConfirm($"Delete trip #{id}? This cannot be undone.");
        if (!confirmed) return;

        try
        {
            var api = HttpClientFactory.CreateClient("Api");
            var resp = await api.DeleteAsync($"api/Trips/{id}");
            if (resp.IsSuccessStatusCode)
            {
                trips?.RemoveAll(t => t.Id == id);
                StateHasChanged();
            }
            else
            {
                error = $"Delete failed ({(int)resp.StatusCode})";
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    // Tiny JS interop for quick confirm without wiring a modal yet
    [Inject] private IJSRuntime JS { get; set; } = default!;
    private async Task<bool> JSConfirm(string message)
        => await JS.InvokeAsync<bool>("confirm", message);
}
